{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:9898'; // Backend API URL\n\nconst blogService = {\n  // ✅ Validate login (email and password)\n  validateLogin: (email, password) => {\n    return axios.post(`${API_URL}/login`, {\n      email,\n      password\n    });\n  },\n  // ✅ Register a new user (Corrected param order to match backend)\n  registerUser: (name, email, password) => {\n    return axios.post(`${API_URL}/register`, {\n      name,\n      email,\n      password\n    });\n  },\n  // ✅ Create a new blog post\n  createPost: (postData, token) => {\n    return axios.post(`${API_URL}/posts`, postData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  },\n  // ✅ Get the user dashboard (protected route)\n  getDashboard: token => {\n    return axios.get(`${API_URL}/dashboard`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  },\n  // ✅ Get all posts by a specific author\n  getPostsByAuthor: authorName => {\n    return axios.get(`${API_URL}/posts/author/${authorName}`);\n  },\n  // ✅ Get a specific post by ID\n  getPost: id => {\n    return axios.get(`${API_URL}/posts/${id}`);\n  },\n  // ✅ Delete a post by ID\n  deletePost: (id, token) => {\n    return axios.delete(`${API_URL}/posts/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  },\n  // ✅ Update an existing post by ID\n  updatePost: (id, updatedData, token) => {\n    return axios.put(`${API_URL}/posts/${id}`, updatedData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  },\n  // ✅ Get all posts by category\n  getPostsByCategory: category => {\n    return axios.get(`${API_URL}/category/${category}`);\n  }\n};\nexport default blogService;","map":{"version":3,"names":["axios","API_URL","blogService","validateLogin","email","password","post","registerUser","name","createPost","postData","token","headers","Authorization","getDashboard","get","getPostsByAuthor","authorName","getPost","id","deletePost","delete","updatePost","updatedData","put","getPostsByCategory","category"],"sources":["C:/Users/hii/Videos/React Projects/BLOG PROJECT/blog-app/src/blogService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:9898'; // Backend API URL\r\n\r\nconst blogService = {\r\n  // ✅ Validate login (email and password)\r\n  validateLogin: (email, password) => {\r\n    return axios.post(`${API_URL}/login`, { email, password });\r\n  },\r\n\r\n  // ✅ Register a new user (Corrected param order to match backend)\r\n  registerUser: (name, email, password) => {\r\n    return axios.post(`${API_URL}/register`, { name, email, password });\r\n  },\r\n\r\n  // ✅ Create a new blog post\r\n  createPost: (postData, token) => {\r\n    return axios.post(`${API_URL}/posts`, postData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  },\r\n\r\n  // ✅ Get the user dashboard (protected route)\r\n  getDashboard: (token) => {\r\n    return axios.get(`${API_URL}/dashboard`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  },\r\n\r\n  // ✅ Get all posts by a specific author\r\n  getPostsByAuthor: (authorName) => {\r\n    return axios.get(`${API_URL}/posts/author/${authorName}`);\r\n  },\r\n\r\n  // ✅ Get a specific post by ID\r\n  getPost: (id) => {\r\n    return axios.get(`${API_URL}/posts/${id}`);\r\n  },\r\n\r\n  // ✅ Delete a post by ID\r\n  deletePost: (id, token) => {\r\n    return axios.delete(`${API_URL}/posts/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  },\r\n\r\n  // ✅ Update an existing post by ID\r\n  updatePost: (id, updatedData, token) => {\r\n    return axios.put(`${API_URL}/posts/${id}`, updatedData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  },\r\n\r\n  // ✅ Get all posts by category\r\n  getPostsByCategory: (category) => {\r\n    return axios.get(`${API_URL}/category/${category}`);\r\n  },\r\n};\r\n\r\nexport default blogService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC,MAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IAClC,OAAOL,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,QAAQ,EAAE;MAAEG,KAAK;MAAEC;IAAS,CAAC,CAAC;EAC5D,CAAC;EAED;EACAE,YAAY,EAAEA,CAACC,IAAI,EAAEJ,KAAK,EAAEC,QAAQ,KAAK;IACvC,OAAOL,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,WAAW,EAAE;MAAEO,IAAI;MAAEJ,KAAK;MAAEC;IAAS,CAAC,CAAC;EACrE,CAAC;EAED;EACAI,UAAU,EAAEA,CAACC,QAAQ,EAAEC,KAAK,KAAK;IAC/B,OAAOX,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,QAAQ,EAAES,QAAQ,EAAE;MAC9CE,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUF,KAAK;MAChC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAG,YAAY,EAAGH,KAAK,IAAK;IACvB,OAAOX,KAAK,CAACe,GAAG,CAAC,GAAGd,OAAO,YAAY,EAAE;MACvCW,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUF,KAAK;MAChC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAK,gBAAgB,EAAGC,UAAU,IAAK;IAChC,OAAOjB,KAAK,CAACe,GAAG,CAAC,GAAGd,OAAO,iBAAiBgB,UAAU,EAAE,CAAC;EAC3D,CAAC;EAED;EACAC,OAAO,EAAGC,EAAE,IAAK;IACf,OAAOnB,KAAK,CAACe,GAAG,CAAC,GAAGd,OAAO,UAAUkB,EAAE,EAAE,CAAC;EAC5C,CAAC;EAED;EACAC,UAAU,EAAEA,CAACD,EAAE,EAAER,KAAK,KAAK;IACzB,OAAOX,KAAK,CAACqB,MAAM,CAAC,GAAGpB,OAAO,UAAUkB,EAAE,EAAE,EAAE;MAC5CP,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUF,KAAK;MAChC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAW,UAAU,EAAEA,CAACH,EAAE,EAAEI,WAAW,EAAEZ,KAAK,KAAK;IACtC,OAAOX,KAAK,CAACwB,GAAG,CAAC,GAAGvB,OAAO,UAAUkB,EAAE,EAAE,EAAEI,WAAW,EAAE;MACtDX,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUF,KAAK;MAChC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAc,kBAAkB,EAAGC,QAAQ,IAAK;IAChC,OAAO1B,KAAK,CAACe,GAAG,CAAC,GAAGd,OAAO,aAAayB,QAAQ,EAAE,CAAC;EACrD;AACF,CAAC;AAED,eAAexB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}